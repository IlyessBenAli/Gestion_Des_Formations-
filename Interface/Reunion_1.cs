using DevExpress.XtraBars;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Data.Entity;
using Data;
using System.Runtime.Remoting.Contexts;
using System.Data.Entity.Validation;
using System.Diagnostics;
using static DevExpress.XtraEditors.Mask.MaskSettings;
using System.Net;

namespace Interface
{
    public partial class Reunion_1 : DevExpress.XtraBars.FluentDesignSystem.FluentDesignForm
    {
        public Reunion_1()
        {
            InitializeComponent();
            reunionDataGridView.CellFormatting += reunionDataGridView_CellFormatting;




            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            // Data.gestionformationEntities1 dbContext = new Data.gestionformationEntities1();
            // Call the Load method to get the data for the given DbSet from the database.
            //dbContext.Formateur.Load();
            // This line of code is generated by Data Source Configuration Wizard
        }

        private void labelControl1_Click(object sender, EventArgs e)
        {

        }

        private void accordionControlElement2_Click(object sender, EventArgs e)
        {
            Participant_1 participant_1 = new Participant_1();
            participant_1.Show();
            this.Hide();

        }

        private void accordionControlElement3_Click(object sender, EventArgs e)
        {
            Formateur formateur = new Formateur();
            formateur.Show();
            this.Hide();
        }

        private void schedulerControl1_Click(object sender, EventArgs e)
        {

        }

        private void formateurIDLabel1_Click(object sender, EventArgs e)
        {

        }

        private void simpleButton5_Click(object sender, EventArgs e)
        {
            reunionBindingSource.AllowNew = true;
            reunionBindingSource.AddNew();
        }

        private void simpleButton6_Click(object sender, EventArgs e)
        {

        }

     

        private void simpleButton8_Click(object sender, EventArgs e)
        {
            using (var ctx = new Data.FormationEntities())
            {
                var reunion = reunionBindingSource.Current as Data.Reunion;
                if (reunion != null)
                {
                    reunion.idresponsable = 1;
                    // Add the reunion entity to the context
                    ctx.Reunion.Add(reunion);
                  
                     
                    // Add the related formateur entities to the context
                    foreach (DataGridViewRow row in formateurDataGridView.SelectedRows)
                    {
                        var formateur = row.DataBoundItem as Data.Formateur;
                        if (formateur != null)
                        {
                            // Load the formateur entity from the context
                            formateur = ctx.Formateur.Find(formateur.idformateur);

                            Data.Reunionform reunionForm = new Data.Reunionform(formateur.idformateur,reunion.idreunion);
                            

                            // Add the Reunionform entity to the context
                            ctx.Reunionform.Add(reunionForm); ;
                                                

                            //reunion.Reunionform.Add(new Reunionform { Reunion = reunion, Formateur = formateur });
                        }
                    }
                }

                // Save changes to the database
                try
                {
                    // Save changes to the database
                    ctx.SaveChanges();
                    // Refresh the binding source with the updated data from the database
                    reunionBindingSource.DataSource = ctx.Reunion.ToList();
                    reunionBindingSource.ResetBindings(false);

                    // Show a success message to the user
                    MessageBox.Show("Reunion added successfully!", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
                catch (DbEntityValidationException ex)
                {
                    Debug.WriteLine(ex);
                    foreach (var error in ex.EntityValidationErrors)
                    {
                        Console.WriteLine("Validation errors for entity of type {0}:",
                            error.Entry.Entity.GetType().Name);
                        foreach (var validationError in error.ValidationErrors)
                        {
                            Console.WriteLine("- Property: {0}, Error: {1}",
                                validationError.PropertyName, validationError.ErrorMessage);
                        }
                    }
                }

                
            }



        }









        private void simpleButton9_Click(object sender, EventArgs e)
        {
            Data.FormationEntities ctx = new Data.FormationEntities();
            Data.Reunion rn = ctx.Reunion.Find(((Data.Reunion)reunionBindingSource.Current).idreunion);
            ctx.Reunion.Remove(rn);

            ctx.SaveChanges();
            MessageBox.Show("Reunion Delteed successfully!", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
            reunionBindingSource.DataSource = ctx.Reunion.ToList();
            reunionBindingSource.ResetBindings(false);
        }
        private void simpleButton7_Click(object sender, EventArgs e)
        {
            Data.FormationEntities ctx = new Data.FormationEntities();
            var foorm = (Data.Reunion)reunionBindingSource.Current;

            // Detach the entity from all instances of IEntityChangeTracker
            ctx.Entry(foorm).State = EntityState.Detached;

            // Modify the entity
            ctx.Entry(foorm).State = EntityState.Modified;
            ctx.SaveChanges();

            MessageBox.Show("Reunion Updated successfully!", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
            reunionBindingSource.DataSource = ctx.Reunion.ToList();
            reunionBindingSource.ResetBindings(false);


        }
        private void Reunion_1_Load(object sender, EventArgs e)
        {
            Data.FormationEntities ctx = new Data.FormationEntities();
            reunionBindingSource.DataSource = ctx.Reunion.ToList();
            var reunions = ctx.Reunion.ToList();

            // Récupérer tous les Reunionform pour toutes les réunions
            var allReunionForms = ctx.Reunionform.ToList();

            // Récupérer la liste des formateurs avec leur ID et leur nom
            var formateurList = allReunionForms.Select(rf => new { Id = rf.Formateur.idformateur, Nom = rf.Formateur.nom })
                                                .Distinct()
                                                .ToList();

            // Définir la colonne ComboBox pour le DataGridView
            var formateurColumn = new DataGridViewComboBoxColumn();
            formateurColumn.Name = "Formateur";
            formateurColumn.HeaderText = "Formateur";
            formateurColumn.ValueMember = "Id";
            formateurColumn.DisplayMember = "Nom";
            formateurColumn.DataSource = formateurList;

            // Ajouter la colonne au DataGridView
            reunionDataGridView.Columns.Add(formateurColumn);

            // Mettre à jour la liste des Reunionform pour chaque réunion
            foreach (var reunion in ctx.Reunion.ToList())
            {
                var reunionForms = allReunionForms.Where(rf => rf.idreunion == reunion.idreunion).ToList();
                reunion.Reunionform = reunionForms;
            }

            // Lier le DataGridView à la liste des réunions
            reunionBindingSource.DataSource = ctx.Reunion.ToList();






            reunionBindingSource.ResetBindings(false);
            
            formateurBindingSource.DataSource = ctx.Formateur.ToList();
            formateurBindingSource.ResetBindings(false);
            
               

        }
        private void reunionDataGridView_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
           
        }


        private void formateurGridControl_Click(object sender, EventArgs e)
        {

        }

        private void schedulerControl1_Click_1(object sender, EventArgs e)
        {

        }

        private void formateurDataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void sujetLabel_Click(object sender, EventArgs e)
        {

        }

        private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
             


        }

        private void panel1_Paint(object sender, PaintEventArgs e)
        {

        }

        private void dataGridView1_CellContentClick_1(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void fluentDesignFormContainer1_Click(object sender, EventArgs e)
        {

        }

        private void dataGridView1_CellContentClick_2(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void formateurDataGridView_CellContentClick_1(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void reunionBindingNavigator_RefreshItems(object sender, EventArgs e)
        {

        }

        private void accordionControlElement1_Click(object sender, EventArgs e)
        {
            Session formateur = new Session();
            formateur.Show();
            this.Hide();
        }

        private void dataGridView1_CellContentClick_3(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void reunionDataGridView_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }
    }
    }
 
